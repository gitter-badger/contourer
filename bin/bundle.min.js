"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function isPointInRect(e,t){return e.x>=t.left&&e.x<t.right&&e.y>=t.top&&e.y<t.bottom}function compute1DArray(e,t){return new Array(e).fill(void 0).map(function(e,n){return t(n)})}function compute2DArray(e,t){return compute1DArray(e.height,function(n){return compute1DArray(e.width,function(e){return t(new Vector(e,n))})})}function flatten(e){var t;return(t=[]).concat.apply(t,_toConsumableArray(e))}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function getCanvasMousePos(e,t){var n=e.getBoundingClientRect();return new Vector((t.clientX-n.left)*(e.width/n.width),(t.clientY-n.top)*(e.height/n.height))}function getScrollDir(e){return 0==e.deltaY?0:e.deltaY/Math.abs(e.deltaY)}function setCanvasSmoothing(e,t){e.imageSmoothingEnabled=t,e.mozImageSmoothingEnabled=t,e.webkitImageSmoothingEnabled=t,e.mnImageSmoothingEnabled=t}function createCanvas(e,t){var n=document.createElement("canvas");return n.width=t.width,n.height=t.height,n.style.position="absolute",n.style.left=t.left.toString()+"px",n.style.top=t.top.toString()+"px",e.appendChild(n),n.getContext("2d")}function getCanvasDims(e){return new Dimensions(e.canvas.width,e.canvas.height)}function compileShader(e,t,n){var a=e.createShader(n);if(e.shaderSource(a,t),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw console.log(t),"Shader compile error: "+e.getShaderInfoLog(a);return a}function createProgram(e,t,n){var a=e.createProgram();return e.attachShader(a,compileShader(e,t,e.VERTEX_SHADER)),e.attachShader(a,compileShader(e,n,e.FRAGMENT_SHADER)),e.linkProgram(a),a}function createComputeTexture(e,t){var n=arguments.length<=2||void 0===arguments[2]?e.FLOAT:arguments[2],a=arguments.length<=3||void 0===arguments[3]?null:arguments[3],i=e.createTexture();return e.bindTexture(e.TEXTURE_2D,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t.width,t.height,0,e.RGBA,n,a),i}function createFBO(e,t,n){var a=e.createFramebuffer();if(e.bindFramebuffer(e.FRAMEBUFFER,a),n.length>1?(t.drawBuffersWEBGL(compute1DArray(n.length,function(e){return t["COLOR_ATTACHMENT"+e.toString()+"_WEBGL"]})),n.forEach(function(n,a){e.framebufferTexture2D(e.FRAMEBUFFER,t["COLOR_ATTACHMENT"+a.toString()+"_WEBGL"],e.TEXTURE_2D,n,0)})):e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n[0],0),e.checkFramebufferStatus(e.FRAMEBUFFER)!=e.FRAMEBUFFER_COMPLETE)throw"GL_FRAMEBUFFER_COMPLETE failed.";return a}function createArrayBuffer(e,t,n){var a=e.createBuffer();return e.bindBuffer(t,a),e.bufferData(t,n,e.STATIC_DRAW),a}function registerVertexAttrib(e,t,n,a,i){var r=e.getAttribLocation(t,n);e.enableVertexAttribArray(r),e.bindBuffer(e.ARRAY_BUFFER,i),e.vertexAttribPointer(r,a,e.FLOAT,!1,0,0)}function registerTextures(e,t,n){n.forEach(function(n,a){var i=e.getUniformLocation(t,n);e.uniform1i(i,a)})}function registerUniforms(e,t,n,a){n.forEach(function(n){var i=e.getUniformLocation(t,n.name);"int"==n.type?e.uniform1i(i,a[n.name]):"float"==n.type?e.uniform1f(i,a[n.name]):/^ivec[2-4]$/g.test(n.type)?e["uniform"+n.type[4].toString()+"iv"](i,new Int32Array(a[n.name])):/^vec[2-4]$/g.test(n.type)&&e["uniform"+n.type[3].toString()+"fv"](i,new Float32Array(a[n.name]))})}function bindTextures(e,t){t.forEach(function(t,n){e.activeTexture(e["TEXTURE"+n.toString()]),e.bindTexture(e.TEXTURE_2D,t)})}function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function init(){var e=new ContourerManager;initRender(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function initRender(e){var t=document.getElementById("indexContainer");ReactDOM.render(React.createElement(ContourerApp,{manager:e}),t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Vector=function(){function e(t,n){_classCallCheck(this,e),this.x=t,this.y=n}return _createClass(e,[{key:"add",value:function(t){return new e(this.x+t.x,this.y+t.y)}},{key:"subtract",value:function(t){return new e(this.x-t.x,this.y-t.y)}},{key:"multiply",value:function(t){return new e(this.x*t,this.y*t)}},{key:"divide",value:function(t){return new e(this.x/t,this.y/t)}},{key:"equals",value:function(e){return this.x==e.x&&this.y==e.y}},{key:"floor",value:function(){return new e(Math.floor(this.x),Math.floor(this.y))}},{key:"dot",value:function(e){return this.x*e.x+this.y*e.y}},{key:"getLength",value:function(){return Math.sqrt(this.dot(this))}},{key:"getAngle",value:function(){return Math.atan2(this.y,this.x)}},{key:"toArray",value:function(){return[this.x,this.y]}}],[{key:"fromPolar",value:function(t,n){return new e(t*Math.cos(n),t*Math.sin(n))}}]),e}(),Dimensions=function(){function e(t,n){_classCallCheck(this,e),this.width=t,this.height=n}return _createClass(e,[{key:"contains",value:function(e){return isPointInRect(e,new Rect(new Vector(0,0),this))}},{key:"getArea",value:function(){return this.width*this.height}},{key:"toArray",value:function(){return[this.width,this.height]}}]),e}(),Color=function(){function e(t,n,a){_classCallCheck(this,e),this.r=t,this.g=n,this.b=a}return _createClass(e,[{key:"toArray",value:function(){return[this.r,this.g,this.b]}}]),e}(),Rect=function(){function e(t,n){_classCallCheck(this,e),this.pos=t,this.dims=n}return _createClass(e,[{key:"x",get:function(){return this.pos.x}},{key:"y",get:function(){return this.pos.y}},{key:"width",get:function(){return this.dims.width}},{key:"height",get:function(){return this.dims.height}},{key:"left",get:function(){return this.pos.x}},{key:"right",get:function(){return this.pos.x+this.dims.width}},{key:"top",get:function(){return this.pos.y}},{key:"bottom",get:function(){return this.pos.y+this.dims.height}}]),e}(),MOUSE_LEFT=0,MOUSE_RIGHT=2,MOUSE_MIDDLE=1,DIRS4=[new Vector(1,0),new Vector(0,1),new Vector((-1),0),new Vector(0,(-1))],ScalableViewportManager=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?new Vector(0,0):arguments[0],n=arguments.length<=1||void 0===arguments[1]?1:arguments[1];_classCallCheck(this,e),this.pos=t,this.scale=n}return _createClass(e,[{key:"viewportToWorld",value:function(e){return e.multiply(this.scale).add(this.pos)}},{key:"worldToViewport",value:function(e){return e.subtract(this.pos).divide(this.scale)}},{key:"translate",value:function(e){this.pos=this.pos.subtract(e.multiply(this.scale))}},{key:"scaleAtPoint",value:function(e,t){var n=this.scale*Math.exp(e),a=this.pos.add(t.multiply(this.scale-n));this.scale=n,this.pos=a}}]),e}(),MouseDownTracker=function e(t,n,a){var i=this,r=arguments.length<=3||void 0===arguments[3]?function(e){return!0}:arguments[3];_classCallCheck(this,e),this.initTrackCallback=n,this.trackCallback=a,this.isTrackingEnabled=r,this.canvas=t,this.onMouseDown=function(e){i.isTrackingEnabled(e)&&(i.initTrackCallback(e),window.addEventListener("mousemove",i.onMouseMove),window.addEventListener("mouseup",i.onMouseUp),i.canvas.removeEventListener("mousedown",i.onMouseDown),e.preventDefault())},this.onMouseUp=function(e){i.trackCallback(e),window.removeEventListener("mousemove",i.onMouseMove),window.removeEventListener("mouseup",i.onMouseUp),i.canvas.addEventListener("mousedown",i.onMouseDown)},this.onMouseMove=function(e){i.trackCallback(e)},this.canvas.addEventListener("mousedown",this.onMouseDown)},DragManager=function(e){function t(e,n){var a=arguments.length<=2||void 0===arguments[2]?function(e){return!0}:arguments[2];_classCallCheck(this,t);var i=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,function(e){i.prevMousePos=getCanvasMousePos(i.canvas,e)},function(e){var t=getCanvasMousePos(i.canvas,e);n(t.subtract(i.prevMousePos)),i.prevMousePos=t},a));return i.prevMousePos=new Vector(0,0),i}return _inherits(t,e),t}(MouseDownTracker),FULLSCREEN_QUAD_POS_ARRAY=new Float32Array([-1,-1,1,-1,1,1,-1,1]),FULLSCREEN_QUAD_INDEX_ARRAY=new Uint16Array([0,1,2,0,2,3]),FULLSCREEN_QUAD_NUM_VERTICES=6,_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),GPGPUKernelResult=function(){function e(t,n,a){_classCallCheck(this,e),this.ctx=t,this.fbo=n,this.textures=a}return _createClass(e,[{key:"dispose",value:function(){var e=this;null!=this.fbo&&this.ctx.deleteFramebuffer(this.fbo),this.textures.forEach(function(t){e.ctx.deleteTexture(t)})}}]),e}(),GPGPUKernel=function(){function e(t,n){var a=arguments.length<=2||void 0===arguments[2]?[]:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],r=!(arguments.length<=4||void 0===arguments[4])&&arguments[4];_classCallCheck(this,e),this.manager=t,this.program=n,this.params=a,this.numOutputs=i,this.isGraphical=r}return _createClass(e,[{key:"run",value:function(e,t){var n=this,a=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],i=arguments.length<=3||void 0===arguments[3]?this.ctx.FLOAT:arguments[3];this.ctx.useProgram(this.program),registerUniforms(this.ctx,this.program,this.params,a),registerUniforms(this.ctx,this.program,[{name:"uDims",type:"ivec2"}],{uDims:t.toArray()});var r=compute1DArray(this.numOutputs,function(e){return createComputeTexture(n.ctx,t,i)}),o=this.isGraphical?null:createFBO(this.ctx,this.extDB,r);return this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER,o),bindTextures(this.ctx,e),this.ctx.viewport(0,0,t.width,t.height),this.manager.drawFullscreenQuad(this.program),new GPGPUKernelResult(this.ctx,o,r)}},{key:"ctx",get:function(){return this.manager.ctx}},{key:"extDB",get:function(){return this.manager.extDB}}]),e}(),GPGPUManager=function(){function e(t){_classCallCheck(this,e),this.ctx=t,this.extDB=this.ctx.getExtension("WEBGL_draw_buffers"),this.ctx.getExtension("OES_texture_float"),this.quadPosBuffer=createArrayBuffer(this.ctx,this.ctx.ARRAY_BUFFER,FULLSCREEN_QUAD_POS_ARRAY),this.quadIndexBuffer=createArrayBuffer(this.ctx,this.ctx.ELEMENT_ARRAY_BUFFER,FULLSCREEN_QUAD_INDEX_ARRAY)}return _createClass(e,[{key:"drawFullscreenQuad",value:function(e){this.ctx.useProgram(e),this.ctx.bindBuffer(this.ctx.ELEMENT_ARRAY_BUFFER,this.quadIndexBuffer),this.ctx.drawElements(this.ctx.TRIANGLE_STRIP,FULLSCREEN_QUAD_NUM_VERTICES,this.ctx.UNSIGNED_SHORT,0)}},{key:"readPackedFloatData",value:function(e){var t=new Uint8Array(4*e.getArea());return this.ctx.readPixels(0,0,e.width,e.height,this.ctx.RGBA,this.ctx.UNSIGNED_BYTE,t),new Float32Array(t.buffer)}},{key:"arrayToTexture",value:function(e,t){var n=new Float32Array(flatten(flatten(t)));return createComputeTexture(this.ctx,e,this.ctx.FLOAT,n)}},{key:"textureToArray",value:function(t,n){var a=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i="vec2 cVal = texture2D(uInput, vCoord).xy;\ngl_FragData[0] = packFloat(cVal."+"xyzw"[a]+");\n",r=["uInput"],o=this.createKernel(i,r,t,[],0,e.PACK_FLOAT_INCLUDE),s=o.run([n],t,{},this.ctx.UNSIGNED_BYTE),c=this.readPackedFloatData(t);return s.dispose(),compute2DArray(t,function(e){return c[e.y*t.width+e.x]})}},{key:"createKernel",value:function(t,n,a){var i=arguments.length<=3||void 0===arguments[3]?[]:arguments[3],r=arguments.length<=4||void 0===arguments[4]?1:arguments[4],o=arguments.length<=5||void 0===arguments[5]?"":arguments[5],s=!(arguments.length<=6||void 0===arguments[6])&&arguments[6],c=[].concat(i,n.map(function(e){return{type:"sampler2D",name:e}}),[{type:"ivec2",name:"uDims"}]),l=e.createVertShaderSrc(s),u=e.createFragShaderSrc(t.trim().split("\n").map(function(e){return"    "+e}).join("\n")+"\n",c,o,r>1),m=createProgram(this.ctx,l,u);return this.ctx.useProgram(m),registerVertexAttrib(this.ctx,m,"aPos",2,this.quadPosBuffer),registerTextures(this.ctx,m,n),new GPGPUKernel(this,m,i,r,s)}},{key:"createGraphicalKernel",value:function(e,t,n){var a=arguments.length<=3||void 0===arguments[3]?[]:arguments[3],i=arguments.length<=4||void 0===arguments[4]?"":arguments[4];return this.createKernel(e,t,n,a,0,i,!0)}}]),e}();GPGPUManager.getCanvasContext=function(e){var t={depth:!1,antialias:!1};return e.getContext("webgl",t)||e.getContext("webgl-experimental",t)},GPGPUManager.createVertShaderSrc=function(){var e=!(arguments.length<=0||void 0===arguments[0])&&arguments[0];return"precision highp float;\n\nattribute vec2 aPos;\n\nvarying vec2 vCoord;\n\nvoid main(){\n    gl_Position = vec4("+(e?"aPos.x, -aPos.y":"aPos")+", 0.0, 1.0);\n    vCoord = (aPos + 1.0) / 2.0;\n}"},GPGPUManager.PACK_FLOAT_INCLUDE="float integerMod(float x, float y) {\n\tfloat res = floor(mod(x, y));\n\tif (res > floor(y) - 1.0) return 0.0;\n\telse return res;\n}\n\nvec4 packFloat(float f) {\n\tif (f == 0.0) return vec4(0.0);\n\tfloat F = abs(f);\n\tfloat exponent = floor(log2(F));\n\tfloat mantissa = exp2(-exponent) * F;\n\texponent = exponent + floor(log2(mantissa));\n\tfloat mantissa_part1 = integerMod(F * exp2(23.0-exponent), 256.0);\n\tfloat mantissa_part2 = integerMod(F * exp2(15.0-exponent), 256.0);\n\tfloat mantissa_part3 = integerMod(F * exp2(7.0-exponent), 128.0);\n\texponent += 127.0;\n\treturn vec4(\n        mantissa_part1,\n        mantissa_part2,\n        128.0 * integerMod(exponent, 2.0) + mantissa_part3,\n        128.0 * (f < 0.0 ? 1.0 : 0.0) + exponent / 2.0\n    ) * 0.003921569;\n}\n\n",GPGPUManager.createFragShaderSrc=function(e,t){var n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],a=arguments.length<=3||void 0===arguments[3]||arguments[3];return[a?"#extension GL_EXT_draw_buffers: require\n":"","precision highp float;\nprecision highp sampler2D;\n\n#define EPS 0.0000001\n\n"].concat(_toConsumableArray(t.map(function(e){return"uniform "+e.type+" "+e.name+";\n"})),["\nvarying vec2 vCoord;\n\nvec4 arrGet(sampler2D arr, ivec2 id){\n    return texture2D(arr, (vec2(id) + vec2(0.5)) / vec2(uDims));\n}\n\n",n,"void computeFunc(){\n    ivec2 threadId = ivec2(vCoord * vec2(uDims));\n",e,"}\n\nvoid main(){\n    computeFunc();\n}"]).join("")};var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),RED=new Color(255,0,0),GREEN=new Color(0,255,0),BLUE=new Color(0,0,255),WHITE=new Color(255,255,255),ContourerManager=function(){function e(t){_classCallCheck(this,e),this.viewport=new ScalableViewportManager(new Vector(0,0),.01),this.zoomSensitivity=.3,this.contourSpacing=1}return _createClass(e,[{key:"changeDrawFunc",value:function(e,t){var n=!(arguments.length<=2||void 0===arguments[2])&&arguments[2],a="vec2 cPos = (vec2(threadId) * uScale) + uPos;\nvec2 res;\n"+e.trim()+"\ngl_FragData[0] = vec4(\n    res,\n    0.0, 0.0\n);\n";this.fieldKernel=this.gpgpuManager.createKernel(a,[],this.dims,[{type:"float",name:"uScale"},{type:"vec2",name:"uPos"}].concat(n?[{type:"float",name:"time"}]:[]),1,t.trim()+"\n\n"),this.viewport.scale=10/this.dims.width,this.viewport.pos=new Vector((-this.dims.width),(-this.dims.height)).divide(2).multiply(this.viewport.scale),this.contourSpacing=1,this.isAnimated=n}},{key:"useCanvas",value:function(t){this.ctx=GPGPUManager.getCanvasContext(t),this.gpgpuManager=new GPGPUManager(this.ctx),this.dims=getCanvasDims(this.ctx),this.plotKernel=this.gpgpuManager.createGraphicalKernel(e.plotFunc,["uField"],this.dims,[{type:"float",name:"uContourSpacing"}],e.FIELD_CHECK_INCLUDE)}},{key:"destroyContext",value:function(){this.ctx.canvas.width=1,this.ctx.canvas.height=1}},{key:"changeZoom",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?new Vector(this.dims.width/2,this.dims.height/2):arguments[1];this.viewport.scaleAtPoint(-e*this.zoomSensitivity,t)}},{key:"changeContourSpacing",value:function(e){this.contourSpacing*=Math.exp(e*this.zoomSensitivity)}},{key:"translate",value:function(e){this.viewport.translate(e)}},{key:"drawContours",value:function(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t={uScale:this.viewport.scale,uPos:this.viewport.pos.toArray()};this.isAnimated&&(t.time=e);var n=this.fieldKernel.run([],this.dims,t);this.plotKernel.run([n.textures[0]],this.dims,{uContourSpacing:this.contourSpacing}),n.dispose()}}]),e}();ContourerManager.plotFunc="ivec2 lineIndex = ivec2(floor(texture2D(uField, vCoord).xy / uContourSpacing));\nvec2 cmpField = vec2(lineIndex) * uContourSpacing;\nivec2 drawData = ivec2(greaterThanEqual(\n    fieldCheck(threadId, ivec2(0, 1), cmpField) +\n    fieldCheck(threadId, ivec2(1, 0), cmpField) +\n    fieldCheck(threadId, ivec2(0, -1), cmpField) +\n    fieldCheck(threadId, ivec2(-1, 0), cmpField),\n    ivec2(1)));\nif(all(equal(drawData, ivec2(0)))){\n    gl_FragData[0] = vec4(1.0, 1.0, 1.0, 1.0);\n}\nelse{\n    vec2 isAxis = vec2(equal(lineIndex, ivec2(0)));\n    vec2 lineColor = vec2(drawData) * (1.0 - 0.5 * isAxis);\n    gl_FragData[0] = vec4(lineColor.x, 0.5 * dot(vec2(drawData), isAxis), lineColor.y, 1.0);\n}\n",ContourerManager.FIELD_CHECK_INCLUDE="ivec2 fieldCheck(ivec2 cPos, ivec2 dir, vec2 cmpField){\n    ivec2 oPos = cPos + dir;\n    if(all(greaterThanEqual(oPos, ivec2(0))) && all(lessThan(oPos, uDims))){\n        return ivec2(lessThan(arrGet(uField, oPos).xy, cmpField));\n    }\n    else return ivec2(0);\n}\n\n";var ContourerAnimationManager=function(){function e(t){var n=arguments.length<=1||void 0===arguments[1]?1e3:arguments[1];_classCallCheck(this,e),this.manager=t,this.isAnimating=!1,this.numFrames=n,this.currentFrame=0,this.onStopCallback=null,this.animationLoop=this.animationLoop.bind(this)}return _createClass(e,[{key:"start",value:function(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?null:arguments[1];this.currentFrame=e,this.isAnimating=!0,this.onDraw=t,window.requestAnimationFrame(this.animationLoop)}},{key:"animationLoop",value:function(e){this.isAnimating?(this.manager.drawContours(this.currentFrame/this.numFrames),null!=this.onDraw&&this.onDraw(this.currentFrame),this.currentFrame=(this.currentFrame+1)%this.numFrames,window.requestAnimationFrame(this.animationLoop)):null!=this.onStopCallback&&this.onStopCallback()}},{key:"stop",value:function(){var e=arguments.length<=0||void 0===arguments[0]?null:arguments[0];this.isAnimating?(this.isAnimating=!1,this.onStopCallback=e):null!=e&&e()}}]),e}(),DemoFunctions=function t(){_classCallCheck(this,t)};DemoFunctions.INCLUDES={pi:"const float PI = 3.1415926535897932384626433832795;\n\n",complexLib:"vec2 complexMult(vec2 a, vec2 b){\n    return vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 complexDiv(vec2 a, vec2 b){\n    float divisor = dot(b, b);\n    return vec2(dot(a, b), a.y * b.x - a.x * b.y) / divisor;\n}\n\nvec2 complexPow(vec2 a, vec2 b){\n    float r = length(a), phi = atan(a.y, a.x);\n    float newR = pow(r, b.x) * exp(-b.y * phi);\n    float newPhi = b.y * log(r) + b.x * phi;\n    return newR * vec2(cos(newPhi), sin(newPhi));\n}\n\nvec2 complexExp(vec2 b){\n    return exp(b.x) * vec2(cos(b.y), sin(b.y));\n}\n\nvec2 complexLog(vec2 x){\n    return vec2(log(length(x)), atan(x.y, x.x));\n}\n\n",gamma:'/**\n * Translated to OpenGL ES from math.js\n * https://github.com/josdejong/mathjs\n *\n * Math.js is an extensive math library for JavaScript and Node.js,\n * It features real and complex numbers, units, matrices, a large set of\n * mathematical functions, and a flexible expression parser.\n *\n * @version 3.2.1\n * @date    2016-04-26\n *\n * @license\n * Copyright (C) 2013-2016 Jos de Jong <wjosdejong@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the "License"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nvec2 gammaStep(vec2 x, int i, vec2 n, float p){\n    float real = n.x + float(i);\n    float den = real * real + n.y * n.y;\n    if(den != 0.0){\n        return x + vec2(p * real / den, -(p * n.y) / den);\n    }\n    else return vec2(0.0);\n}\n\nvec2 gamma(vec2 n){\n    n.x -= 1.0;\n    vec2 x = vec2(0.99999999999999709182, 0.0);\n\tx = gammaStep(x, 1, n, 57.156235665862923517);\n\tx = gammaStep(x, 2, n, -59.597960355475491248);\n\tx = gammaStep(x, 3, n, 14.136097974741747174);\n\tx = gammaStep(x, 4, n, -0.49191381609762019978);\n\tx = gammaStep(x, 5, n, 0.33994649984811888699e-4);\n\tx = gammaStep(x, 6, n, 0.46523628927048575665e-4);\n\tx = gammaStep(x, 7, n, -0.98374475304879564677e-4);\n\tx = gammaStep(x, 8, n, 0.15808870322491248884e-3);\n\tx = gammaStep(x, 9, n, -0.21026444172410488319e-3);\n\tx = gammaStep(x, 10, n, 0.21743961811521264320e-3);\n\tx = gammaStep(x, 11, n, -0.16431810653676389022e-3);\n\tx = gammaStep(x, 12, n, 0.84418223983852743293e-4);\n\tx = gammaStep(x, 13, n, -0.26190838401581408670e-4);\n\tx = gammaStep(x, 14, n, 0.36899182659531622704e-5);\n    vec2 t = vec2(n.x + 4.7421875 + 0.5, n.y);\n    float twoPiSqrt = sqrt(2.0 * PI);\n\n    n.x += 0.5;\n    vec2 result = complexPow(t, n);\n    result *= twoPiSqrt;\n    float r = exp(-t.x);\n    t = r * vec2(cos(-t.y), sin(-t.y));\n\n    return complexMult(complexMult(result, t), x);\n}\n\n',rotateWithTime:"vec2 rotateWithTime(vec2 v){\n    float cosT = cos(time * 2.0 * PI), sinT = sin(time * 2.0 * PI);\n    return vec2(\n        v.x * cosT - v.y * sinT,\n        v.x * sinT + v.y * cosT\n    );\n}\n\n",snoise:"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n"},DemoFunctions.functions={lorentz:{displayName:"Lorentz Boost",isAnimated:!0,numFrames:200,includeSrc:DemoFunctions.INCLUDES.pi,drawFunc:"float beta = sin(time * 2.0 * PI) * 0.9;\nfloat gamma = 1.0 / sqrt(1.0 - beta * beta);\nres = gamma * vec2(\n    cPos.x * 1.0 + cPos.y * beta,\n    cPos.y * 1.0 + cPos.x * beta\n);\n\n"},mercatorwarp:{displayName:"Mercator Warp",isAnimated:!0,numFrames:800,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib+DemoFunctions.INCLUDES.rotateWithTime,drawFunc:"vec2 scaledPos = cPos * 0.6;\nvec2 invMercator = vec2(scaledPos.x, 2.0 * atan(exp(scaledPos.y)) - 0.5 * PI) * 8.0;\nres = rotateWithTime(invMercator);\n"},mercatorMollweide:{displayName:"Mercator to Mollweide",isAnimated:!0,numFrames:100,includeSrc:DemoFunctions.INCLUDES.pi,drawFunc:"vec2 scaledPos = cPos * 0.3;\nfloat theta = asin(scaledPos.y * 2.0 / PI);\nvec2 invMollweide = vec2(\n    scaledPos.x / cos(theta),\n    asin((2.0 * theta + sin(2.0 * theta)) / PI)\n);\nvec2 invMercator = vec2(scaledPos.x, 2.0 * atan(exp(scaledPos.y)) - 0.5 * PI);\nfloat mixParam = - cos(time * 2.0 * PI) / 2.0 + 0.5;\nres = (invMollweide * mixParam + invMercator * (1.0 - mixParam)) * 8.0;\n"},dipole:{displayName:"Dipole Formation",isAnimated:!0,numFrames:300,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib,drawFunc:"float dist = sin(time * 2.0 * PI + PI / 2.0) * 2.0 + 2.5;\nres = 50.0 / (2.0 * dist) * (\n    complexLog(cPos - vec2(dist, 0.0)) -\n    complexLog(cPos - vec2(-dist, 0.0))\n);\n"},attractRepel:{displayName:"Attraction to Repulsion",isAnimated:!0,numFrames:1e3,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib,drawFunc:"res = 10.0 * (\n    complexLog(cPos - vec2(1.0, 0.0)) +\n    sin(time * 2.0 * PI - PI / 2.0) * complexLog(cPos - vec2(-1.0, 0.0))\n);\n"},neuralnetwork:{displayName:"Neural Network",isAnimated:!0,numFrames:200,includeSrc:DemoFunctions.INCLUDES.pi,drawFunc:"float mixParam = -cos(time * 2.0 * PI) / 2.0 + 0.5;\nvec2 unsigmoid = -log(1.0 / ((cPos + vec2(3.3, 3.0)) / 6.3) - 1.0);\nres = (vec2(\n    unsigmoid.x * 2.0 + unsigmoid.y * 1.0,\n    unsigmoid.x * 2.0 + unsigmoid.y * 3.0\n) - vec2(1.0, -2.0)) * mixParam + cPos * (1.0 - mixParam);\n"},galaxy:{displayName:"Galaxy Warp",isAnimated:!0,numFrames:200,includeSrc:DemoFunctions.INCLUDES.pi,drawFunc:"float mixParam = -cos(time * 2.0 * PI) / 2.0 + 0.5;\nvec2 polPos = vec2(length(cPos), atan(cPos.y, cPos.x));\npolPos = vec2(polPos.x, polPos.y - mixParam / 50.0 * sqrt(1.0 / pow(polPos.x / 40.0, 3.0)));\nres = vec2(polPos.x * cos(polPos.y), polPos.x * sin(polPos.y));\n"},simplex:{displayName:"Simplex Warp",isAnimated:!0,numFrames:1e3,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.snoise,drawFunc:"vec2 circleVary = 2.0 * vec2(\n    cos(time * 2.0 * PI),\n    sin(time * 2.0 * PI)\n);\nres = 2.0 * (cPos +\n0.5 * vec2(\n    snoise(vec4(cPos * 0.25, circleVary + vec2(100.0, 100.0))),\n    snoise(vec4(cPos * 0.25, circleVary + vec2(200.0, 200.0)))\n));\n"},exponentiation:{displayName:"Complex Exponentiation",isAnimated:!0,numFrames:300,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib,drawFunc:"vec2 cartRes = 10.0 * complexPow(cPos, vec2(1.0 / (2.5 - 1.5 * cos(time * 2.0 * PI)), 0.0));\nres = vec2(length(cartRes), 10.0 * atan(cartRes.y, cartRes.x));\n"},mobius:{displayName:"Mobius Transformation",isAnimated:!0,numFrames:1e3,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib+DemoFunctions.INCLUDES.rotateWithTime,drawFunc:"res = rotateWithTime(10.0 * complexDiv(\n    complexMult(vec2(0.5, 3.0), cPos) + vec2(0.5, 1.5),\n    complexMult(vec2(4.0, 1.5), cPos) + vec2(2.0, 3.5)\n));\n"},arcsin:{displayName:"Complex Inverse Sine",isAnimated:!0,numFrames:200,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib,drawFunc:"vec2 invSin = - 10.0 * complexMult(complexLog(complexPow(vec2(1.0, 0.0) - complexPow(cPos, vec2(2.0, 0.0)), vec2(0.5, 0.0)) + complexMult(cPos, vec2(0.0, 1.0))), vec2(0.0, 1.0));\nfloat mixParam = - cos(time * 2.0 * PI) / 2.0 + 0.5;\nres = invSin * mixParam + cPos * (1.0 - mixParam);\n"},gamma:{displayName:"Gamma Function",isAnimated:!0,
numFrames:400,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib+DemoFunctions.INCLUDES.gamma+DemoFunctions.INCLUDES.rotateWithTime,drawFunc:"res = rotateWithTime(10.0 * gamma((cPos + vec2(2.0, 0.0)) / 2.0));\n"},madness:{displayName:"Complex ???",isAnimated:!0,numFrames:800,includeSrc:DemoFunctions.INCLUDES.pi+DemoFunctions.INCLUDES.complexLib,drawFunc:"vec2 madness = - 10.0 * complexMult(complexLog(complexPow(vec2(2.0, 3.0) - complexPow(cPos * 2.0, vec2(2.0, 1.0)), vec2(0.5, 1.0)) + complexMult(cPos * 2.0, vec2(2.0, 1.0))), vec2(2.0, 1.0));\nfloat mixParam = - cos(time * 2.0 * PI) / 2.0 + 0.5;\nres = madness * mixParam + cPos * (1.0 - mixParam);\n"}};var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),CanvasDisplayPane=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"componentDidMount",value:function(){if("onMountCallback"in this.props){var e=ReactDOM.findDOMNode(this);this.props.onMountCallback(e)}}},{key:"componentWillUnmount",value:function(){"onDismountCallback"in this.props&&this.props.onDismountCallback()}},{key:"render",value:function(){return React.createElement("canvas",{width:this.props.dims.width,height:this.props.dims.height,style:{width:"100%"}})}}]),t}(React.Component);CanvasDisplayPane.propTypes={dims:React.PropTypes.instanceOf(Dimensions).isRequired,onMountCallback:React.PropTypes.func};var DrawFunctionSelectorButton=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){var e=this;return React.createElement("button",{type:"button",className:"list-group-item"+(this.props.selected?" active":""),onClick:function(){e.props.onClick(e.props.funcName)}},this.props.displayName)}}]),t}(React.Component),DrawFunctionSelector=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e));return n.state={selectedFunc:t.DEFAULT_FUNC},n.handleClick=n.handleClick.bind(n),n}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){var e=this;return React.createElement("div",{className:"list-group"},Object.keys(DemoFunctions.functions).map(function(t){return React.createElement(DrawFunctionSelectorButton,{displayName:DemoFunctions.functions[t].displayName,key:t,funcName:t,selected:t==e.state.selectedFunc,onClick:e.handleClick})}))}},{key:"handleClick",value:function(e){this.setState({selectedFunc:e}),this.props.onSelect(e)}}]),t}(React.Component);DrawFunctionSelector.DEFAULT_FUNC="attractRepel";var AceEditor=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"componentDidMount",value:function(){var e=ReactDOM.findDOMNode(this);this.editor=ace.edit(e),this.editor.setTheme("ace/theme/monokai"),this.editor.getSession().setUseWorker(!1),this.editor.getSession().setMode("ace/mode/glsl"),this.editor.$blockScrolling=1/0,this.editor.setFontSize(18),this.editor.setOptions({maxLines:1/0}),this.editor.getSession().setUseWrapMode(!0)}},{key:"componentWillUnmount",value:function(){this.editor.destroy()}},{key:"setValue",value:function(e){this.editor.setValue(e),this.editor.clearSelection()}},{key:"getValue",value:function(){return this.editor.getSession().getValue()}},{key:"render",value:function(){return React.createElement("div",{style:{height:this.props.height.toString()+"px"}})}}]),t}(React.Component),ContourerApp=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e));return n.animationManager=new ContourerAnimationManager(n.props.manager),n.state={isAnimated:!1,isAnimating:!1,currentFrame:0,numFrames:0,isAnimatedSelectState:!1,numFramesInputVal:"0",shaderCompileError:""},n.useCanvas=n.useCanvas.bind(n),n.setDrawFunc=n.setDrawFunc.bind(n),n.onDrawFuncSelect=n.onDrawFuncSelect.bind(n),n.redraw=n.redraw.bind(n),n.changeZoomAndRedraw=n.changeZoomAndRedraw.bind(n),n.changeContourSpacingAndRedraw=n.changeContourSpacingAndRedraw.bind(n),n.translateAndRedraw=n.translateAndRedraw.bind(n),n.handlePlotClick=n.handlePlotClick.bind(n),n}return _inherits(t,e),_createClass(t,[{key:"componentDidMount",value:function(){this.onDrawFuncSelect(DrawFunctionSelector.DEFAULT_FUNC)}},{key:"render",value:function(){var e=this,t=new Dimensions(640,480);return React.createElement("div",_defineProperty({className:"container"},"className","col-lg-12"),React.createElement("div",{className:"page-header"},React.createElement("h1",null,"Fun with Contours")),React.createElement("div",{className:"well"},React.createElement("p",null,React.createElement("b",null,"Drag")," to move the graph, ",React.createElement("b",null,"scroll")," to zoom, and ",React.createElement("b",null,"Ctrl + scroll")," to change the contour density."),React.createElement("p",null,"Modify ",React.createElement("b",null,React.createElement("a",{href:"#",onClick:function(t){e.numFramesInput.focus(),t.preventDefault()}},"Frames"))," (number of frames), then click ",React.createElement("b",null,"Plot")," to change the animation speed."),React.createElement("p",null,"Use the ",React.createElement("b",null,"slider")," to explore the animation in more detail."),React.createElement("p",null,"Plot your own functions with the ",React.createElement("b",null,"text editors")," below."),React.createElement("p",null,"Just enjoy the pretty animations, or ",React.createElement("b",null,React.createElement("a",{href:"https://github.com/krawthekrow/contourer"},"click here"))," to learn more."),React.createElement("p",null,React.createElement("b",null,"Note: This app uses WebGL, so it needs a sufficiently modern browser and GPU to work."))),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-3"},React.createElement(DrawFunctionSelector,{onSelect:this.onDrawFuncSelect})),React.createElement("div",{className:"col-sm-9"},React.createElement("div",{className:"row"},React.createElement("div",{className:"col-xs-8"},React.createElement("div",{role:"toolbar"},React.createElement("div",{className:"btn-group",role:"group"},React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.changeZoomAndRedraw(1)}},React.createElement("span",{className:"glyphicon glyphicon-zoom-in"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.changeZoomAndRedraw(-1)}},React.createElement("span",{className:"glyphicon glyphicon-zoom-out"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.changeContourSpacingAndRedraw(-1)}},React.createElement("span",{className:"glyphicon glyphicon-plus"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.changeContourSpacingAndRedraw(1)}},React.createElement("span",{className:"glyphicon glyphicon-minus"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.translateAndRedraw(new Vector(1,0))}},React.createElement("span",{className:"glyphicon glyphicon-arrow-left"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.translateAndRedraw(new Vector(0,1))}},React.createElement("span",{className:"glyphicon glyphicon-arrow-up"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.translateAndRedraw(new Vector(0,(-1)))}},React.createElement("span",{className:"glyphicon glyphicon-arrow-down"})),React.createElement("button",{type:"button",className:"btn btn-default",onClick:function(t){e.translateAndRedraw(new Vector((-1),0))}},React.createElement("span",{className:"glyphicon glyphicon-arrow-right"})),this.state.isAnimated&&this.state.isAnimating?React.createElement("button",{type:"button",className:classNames("btn","btn-default",{disabled:!this.state.isAnimated}),onClick:function(t){e.state.isAnimated&&e.state.isAnimating&&e.animationManager.stop(function(){e.setState({isAnimating:!1})})}},React.createElement("span",{className:"glyphicon glyphicon-pause"})):React.createElement("button",{type:"button",className:classNames("btn","btn-default",{disabled:!this.state.isAnimated}),onClick:function(t){e.state.isAnimated&&!e.state.isAnimating&&(e.animationManager.start(e.state.currentFrame,function(t){e.setState({currentFrame:t})}),e.setState({isAnimating:!0}))}},React.createElement("span",{className:"glyphicon glyphicon-play"}))))),React.createElement("div",{className:"col-xs-4"},this.state.isAnimated?React.createElement("input",{type:"range",min:"0",max:(this.state.numFrames-1).toString(),value:this.state.currentFrame,style:{marginTop:"5px"},onChange:function(t){e.setState({currentFrame:parseInt(t.target.value)}),e.state.isAnimating?e.animationManager.stop(function(){e.setState({isAnimating:!1}),e.props.manager.drawContours(e.state.currentFrame/e.state.numFrames)}):e.props.manager.drawContours(e.state.currentFrame/e.state.numFrames)}}):null)),React.createElement("div",{style:{marginTop:"10px"}},React.createElement(CanvasDisplayPane,{dims:t,onMountCallback:function(t){e.useCanvas(t)},onDismountCallback:function(){e.props.manager.destroyContext()}})))),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-12"},React.createElement("h1",null,"Plot Function"),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-xs-9"},React.createElement("div",{className:"form-inline"},React.createElement("div",{className:"btn-group",style:{marginRight:"10px"},role:"group"},React.createElement("button",{type:"button",className:classNames("btn",this.state.isAnimatedSelectState?"btn-default":"btn-primary",{active:!this.state.isAnimatedSelectState}),onClick:function(t){e.setState({isAnimatedSelectState:!1})}},"Static"),React.createElement("button",{type:"button",className:classNames("btn",this.state.isAnimatedSelectState?"btn-primary":"btn-default",{active:this.state.isAnimatedSelectState}),onClick:function(t){e.setState({isAnimatedSelectState:!0})}},"Dynamic")),React.createElement("div",{className:classNames("form-group",{"has-error":this.isNumFramesInputInvalid()}),style:{display:"inline-block",marginBottom:0,verticalAlign:"middle"}},React.createElement("div",{className:"input-group"},React.createElement("span",{className:"input-group-addon"},"Frames"),React.createElement("input",{type:"text",className:"form-control",value:this.state.numFramesInputVal,disabled:!this.state.isAnimatedSelectState,ref:function(t){e.numFramesInput=t},onChange:function(t){e.setState({numFramesInputVal:t.target.value})},style:{width:"60px"}})),React.createElement("div",{className:"help-block",style:{display:this.isNumFramesInputInvalid()?"inline-block":"none",marginLeft:"10px"}},"Must be an integer")))),React.createElement("div",{className:"col-xs-3"},React.createElement("button",{type:"button",className:"btn btn-success btn-block pull-right",style:{width:"80px"},disabled:this.isNumFramesInputInvalid(),ref:function(t){e.plotButton=t},onClick:this.handlePlotClick},"Plot"))),""==this.state.shaderCompileError?null:React.createElement("div",{className:"has-error"},React.createElement("div",{className:"help-block"},React.createElement("p",null,"Your code failed to compile with the following error:"),React.createElement("p",null,this.state.shaderCompileError.trim().split("\n").map(function(e,t){return React.createElement("span",{key:t},e,React.createElement("br",null))})),this.state.shaderCompileError.indexOf("wrong operand types")!=-1?React.createElement("p",null,React.createElement("b",null,'Note that GLSL ES does not implicitly cast ints to floats. Write numbers like "23" as "23.0".')):null,this.state.shaderCompileError.indexOf("gl_FragData")!=-1?React.createElement("p",null,React.createElement("b",null,"Did you forget a semicolon on the last line?")):null,React.createElement("p",null,"View the console to see the full generated WebGL shader code."))),React.createElement("div",{style:{marginTop:"10px"}},React.createElement(AceEditor,{height:"200",key:"drawFuncEditor",ref:function(t){e.drawFuncEditor=t}})))),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-12"},React.createElement("h1",null,"Library Functions"),React.createElement("div",{style:{marginBottom:"10px"}},React.createElement(AceEditor,{height:"200",key:"includeSrcEditor",ref:function(t){e.includeSrcEditor=t}})))))}},{key:"useCanvas",value:function(e){var t=this;new DragManager(e,function(e){t.props.manager.viewport.translate(e),t.redraw()},function(e){return!0});e.addEventListener("wheel",function(n){n.ctrlKey?t.changeContourSpacingAndRedraw(getScrollDir(n)):(t.props.manager.changeZoom(-getScrollDir(n),getCanvasMousePos(e,n)),t.redraw()),n.preventDefault()}),this.props.manager.useCanvas(e)}},{key:"isNumFramesInputInvalid",value:function(){return this.state.isAnimatedSelectState&&this.state.numFramesInputVal.split("").some(function(e){return e.charCodeAt()<"0".charCodeAt()||e.charCodeAt()>"9".charCodeAt()})}},{key:"handlePlotClick",value:function(e){this.setDrawFunc(this.drawFuncEditor.getValue(),this.includeSrcEditor.getValue(),this.state.isAnimatedSelectState,this.state.isAnimatedSelectState?parseInt(this.state.numFramesInputVal):0)}},{key:"redraw",value:function(){this.state.isAnimated?this.props.manager.drawContours(this.state.currentFrame/this.state.numFrames):this.props.manager.drawContours()}},{key:"changeZoomAndRedraw",value:function(e){this.props.manager.changeZoom(e),this.redraw()}},{key:"changeContourSpacingAndRedraw",value:function(e){this.props.manager.changeContourSpacing(e),this.redraw()}},{key:"translateAndRedraw",value:function(e){this.props.manager.translate(e.multiply(50)),this.redraw()}},{key:"setDrawFunc",value:function(e,t){var n=this,a=!(arguments.length<=2||void 0===arguments[2])&&arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3];try{this.props.manager.changeDrawFunc(e,t,a)}catch(r){return void this.setState({shaderCompileError:r})}this.setState({isAnimated:a,isAnimating:a,currentFrame:0,numFrames:i,isAnimatedSelectState:a,numFramesInputVal:i.toString(),shaderCompileError:""}),this.animationManager.numFrames=i,a?this.animationManager.stop(function(){n.animationManager.start(0,function(e){n.setState({currentFrame:e})})}):this.props.manager.drawContours()}},{key:"onDrawFuncSelect",value:function(e){var t=DemoFunctions.functions[e];this.drawFuncEditor.setValue(t.drawFunc.trim()),this.includeSrcEditor.setValue(t.includeSrc.trim()),t.isAnimated?this.setDrawFunc(t.drawFunc,t.includeSrc,t.isAnimated,t.numFrames):this.setDrawFunc(t.drawFunc,t.includeSrc)}}]),t}(React.Component);
//# sourceMappingURL=data:application/json;base64,
